@use "sass:list";
@use "sass:string";

@function remove($list, $value) {
  $result: ();

  @for $i from 1 through list.length($list) {
    @if nth($list, $i) != $value {
      $result: list.append($result, nth($list, $i));
    }
  }

  @return $result;
}

@function get-classname($classname-items) {
  $classname: null;
  $classname-items: remove($classname-items, null);

  @for $i from 1 through list.length($classname-items) {
    $classname-item: list.nth($classname-items, $i);

    @if $classname-item != '' and $classname-item != null {
      $classname: if($i == 1, $classname-item, '#{$classname}#{unquote('-')}#{$classname-item}');
    }
  }

  @return $classname;
}

@mixin output-directional-property(
  $name,
  $sizes,
  $directions,
  $breakpoint-suffix: ''
) {
  @each $size in $sizes {
    @each $direction-name, $direction-values in $directions {
      $classname: get-classname(($bitstyles-namespace, 'u', $name, $size, $direction-name));

      .#{$classname}#{$breakpoint-suffix} {
        @each $direction in $direction-values {
          $property: if($direction, '#{$name}-#{$direction}', $name);

          #{$property}: spacing($size);
        }
      }

      @if $size != '0' {
        $classname: get-classname(($bitstyles-namespace, 'u', $name, 'neg', $size, $direction-name));
        .#{$classname}#{$breakpoint-suffix} {
          @each $direction in $direction-values {
            $property: if($direction, '#{$name}-#{$direction}', $name);

            #{$property}: -#{spacing($size)};
          }
        }
      }
    }
  }
}
