@use "sass:list";
@use "sass:string";

@function remove($list, $value) {
  $result: ();

  @for $i from 1 through list.length($list) {
    @if nth($list, $i) != $value {
      $result: list.append($result, nth($list, $i));
    }
  }

  @return $result;
}

@function get-classname($classname-items) {
  $classname: null;
  $classname-items: remove($classname-items, null);

  @for $i from 1 through list.length($classname-items) {
    $classname-item: list.nth($classname-items, $i);

    @if $classname-item != '' and $classname-item != null {
      $classname: if($i == 1, $classname-item, '#{$classname}#{unquote('-')}#{$classname-item}');
    }
  }

  @return $classname;
}

@mixin output-property-directions($direction-values, $name, $value) {
  @each $direction in $direction-values {
    $property: if($direction, '#{$name}-#{$direction}', $name);

    #{$property}: $value;
  }
}

@mixin output-directional-property(
  $property-name,
  $classname-root,
  $values,
  $directions,
  $breakpoint-suffix: ''
) {
  @each $alias, $value in $values {
    @each $direction-name, $direction-values in $directions {
      $classname: get-classname(
        ($bitstyles-namespace,
        'u',
        $classname-root,
        $alias,
        $direction-name
      )
    );

      .#{$classname}#{$breakpoint-suffix} {
        @include output-property-directions(
          $direction-values: $direction-values,
          $name: $property-name,
          $value: $value
        );
      }
    }
  }
}
