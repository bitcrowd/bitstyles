@use 'sass:map';
@use './custom-properties';
@use './classname';

@mixin colors($colors) {
  $allowed-color-properties: (
    'color',
    'background-color',
    'border-color',
    'box-shadow'
  );

  @if map.has-key($colors, 'default') {
    $current-colors: map.get($colors, 'default');

    &,
    &:visited {
      /* stylelint-disable max-nesting-depth */
      @each $color-property in $allowed-color-properties {
        @if map.has-key($current-colors, $color-property) {
          --button-#{$color-property}: #{map.get(
              $current-colors,
              $color-property
            )};
        }
      }
      /* stylelint-enable max-nesting-depth */
    }
  }

  @if map.has-key($colors, 'hover') {
    $current-colors: map.get($colors, 'hover');

    &:hover,
    &:focus {
      /* stylelint-disable max-nesting-depth */
      @each $color-property in $allowed-color-properties {
        @if map.has-key($current-colors, $color-property) {
          --button-#{$color-property}: #{map.get(
              $current-colors,
              $color-property
            )};
        }
      }
      /* stylelint-enable max-nesting-depth */
    }
  }

  @if map.has-key($colors, 'active') {
    $current-colors: map.get($colors, 'active');

    &:active {
      /* stylelint-disable max-nesting-depth */
      @each $color-property in $allowed-color-properties {
        @if map.has-key($current-colors, $color-property) {
          --button-#{$color-property}: #{map.get(
              $current-colors,
              $color-property
            )};
        }
      }
      /* stylelint-enable max-nesting-depth */
    }
  }

  @if map.has-key($colors, 'pressed') {
    $current-colors: map.get($colors, 'pressed');

    &[aria-pressed='true'],
    &[aria-selected='true'],
    &[aria-current] {
      /* stylelint-disable max-nesting-depth */
      @each $color-property in $allowed-color-properties {
        @if map.has-key($current-colors, $color-property) {
          --button-#{$color-property}: #{map.get(
              $current-colors,
              $color-property
            )};
        }
      }
      /* stylelint-enable max-nesting-depth */
    }
  }

  @if map.has-key($colors, 'disabled') {
    $current-colors: map.get($colors, 'disabled');

    &:disabled,
    &[aria-disabled='true'],
    &:disabled:hover,
    &[aria-disabled='true']:hover,
    &:disabled:focus,
    &[aria-disabled='true']:focus {
      --button-color: #{map.get($current-colors, 'color')};
      --button-background-color: #{map.get(
          $current-colors,
          'background-color'
        )};
      --button-border-color: #{map.get($current-colors, 'border-color')};
      --button-box-shadow: #{map.get($current-colors, 'box-shadow')};
    }
  }
}

@mixin sizes($sizes, $withSquareVariant: true) {
  $allowed-sizes: (
    'padding-vertical',
    'padding-horizontal',
    'border-width',
    'border-radius',
    'min-height',
    'min-width',
    'font-size',
    'font-weight'
  );

  @each $property-name in ($allowed-sizes) {
    @if map.has-key($sizes, $property-name) {
      --button-#{$property-name}: #{map.get($sizes, $property-name)};
    }
  }

  @if $withSquareVariant {
    &#{classname.get($classname-items: 'button--square', $layer: 'atom')} {
      --button-min-width: calc(#{map.get($sizes, 'padding-vertical')} + 2em);
      --button-min-height: calc(#{map.get($sizes, 'padding-vertical')} + 2em);

      @if map.has-key($sizes, 'padding-vertical') {
        --button-padding-horizontal: #{map.get($sizes, 'padding-vertical')};
        --button-padding-vertical: #{map.get($sizes, 'padding-vertical')};
      }
    }
  }
}
