// Typographic helpers
//
// Styleguide 1.15

// Generic heading
//
// **Shared styles for heading elements**
//
// Styleguide 1.15.1

@mixin generic-heading {
  margin: 0 0 spacing('base');
  font-family: $bitstyles-font-family-header;
  font-weight: $bitstyles-font-weight-bold;
  text-rendering: optimizeLegibility;

  @if $bitstyles-font-family-header-loaded != $bitstyles-font-family-header {
    .fonts-loaded & {
      font-family: $bitstyles-font-family-header-loaded;
    }
  }
}

// Font-size helper
//
// **Standarised method to set font-size**.
//
// Sets font-sizes using `rem`s with `px` fallback.
//
// @param {Number} $pixel-size  CSS dimension in `px` units. The font-size required, in pixels.
//
// @param {Number} $root-size  CSS dimension in `px` units. The current base font-size of the page (normally the font-size of the `html` element).
//
// Styleguide 1.15.2

@mixin set-font-size($pixel-size, $root-size: $bitstyles-font-size-base-small) {
  /* stylelint-disable declaration-block-no-duplicate-properties */
  font-size: $pixel-size;
  font-size: px-to-rem($pixel-size, $root-size);
  /* stylelint-enable declaration-block-no-duplicate-properties */
}

// Font-size generator
//
// **Generate your typographic scale**
//
// Set your font-sizes in the map `$bitstyles-font-sizes` e.g.
//
// ```scss
// $bitstyles-font-sizes: (
//   'base': (
//     'html': $bitstyles-font-size-base-small,
//     'h0': 32px,
//     'h1': 24px,
//     'h2': 20px,
//     'h3': 18px,
//     'h4': $bitstyles-font-size-base-small,
//     'h5': $bitstyles-font-size-base-small,
//     'h6': $bitstyles-font-size-base-small
//   ),
//   'medium-and-up': (
//     'html': $bitstyles-font-size-base,
//     'h0': 86px,
//     'h1': 40px,
//     'h2': 28px,
//     'h3': 20px,
//     'h4': $bitstyles-font-size-base,
//     'h5': $bitstyles-font-size-base,
//     'h6': $bitstyles-font-size-base
//   )
// );
// ```
//
// Use `px` to define font-sizes, the output will specify `rem`s with a `px` fallback.
//
// `base` is a reserved word, and results in font-sizes being output without an enclosing media query.
//
// The media-query names used should be defined in `$bitstyles-breakpoints`.
//
// @param {String} $prefix  Optional. Provide a string that will be prepended to the element name. Can include `.` to output classname selectors instead of elements.
//
// @param {List} $subset  Optional. Provide a list of element names for which to output font-sizes. Defaults to include all sizes defined in `$bitstyles-font-sizes`.
//
// Styleguide 1.15.3

@mixin generate-font-sizes($prefix: '', $subset: ()) {
  @each $media-query-name, $font-sizes in $bitstyles-font-sizes {
    // Donâ€™t wrap base classes in a media-query
    @if $media-query-name == 'base' {
      @include output-font-sizes($font-sizes, $prefix, $subset);
    }

    @else {
      @include media-query($media-query-name) {
        @include output-font-sizes($font-sizes, $prefix, $subset);
      }
    }
  }
}

// Output font sizes
//
// **Private mixin**
//
// Used to output font-sizes from a map of font-sizes in `element-name: font-size` pairs.
//
// @param {Map} $font-sizes  A map of font-sizes in `element-name: font-size` pairs. See `$bitstyles-font-sizes` for an example.
//
// @param {String} $prefix  A string to prefix to the ouput selector.
//
// @param {List} $subset  Provide a list of element names for which to output font-sizes. Defaults to include all sizes defined in the `$font-sizes` parameter.

@mixin output-font-sizes($font-sizes, $prefix, $subset) {
  $base-size: $bitstyles-font-size-base-small;

  @if map-has-key($font-sizes, 'html') {
    $base-size: map-get($font-sizes, 'html');
  }

  @each $element-name, $font-size in ($font-sizes) {
    @if (length($subset) == 0) or (index($subset, $element-name)) {
      #{$bitstyles-namespace}#{$prefix}#{$element-name} {
        /* stylelint-disable max-nesting-depth */
        @if $element-name == 'html' {
          font-size: $font-size;
        }

        @else {
          @include set-font-size($font-size, $base-size);
        }
        /* stylelint-enable max-nesting-depth */
      }
    }
  }
}
