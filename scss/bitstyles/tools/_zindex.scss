@use 'sass:list';

// Z-index
//
// **Assign z-index values in a controlled manner**
//
// Avoid situations where you specify ever-escalating z-indices.
//
// Solves problems outlined at:
// <http://philipwalton.com/articles/what-no-one-told-you-about-z-index/>
//
// Define a global variable consisting of a sass list of names
// `$globalz: block__element-name-bottom, block__element-name-top;`
//
// Items further to the right are higher in the stack.
//
// Now when you assign a zindex in your Sass, you can use its name to specify where it
// sits in the z-index stacking order.
//
// ```scss
// .block__element-name-bottom {
//   z-index: z($globalz, block__element-name-bottom);
// }
//
// .block__element-name-top {
//   z-index: z($globalz, block__element-name-top);
// }
// ```
//
// outputs:
//
// ```css
// .block__element-name-bottom {
//   z-index: 1;
// }
//
// .block__element-name-top {
//   z-index: 2;
// }
// ```
//
// @param {List} $list  A list of strings in order of their z-index stacking order.
//
// @param {String} $lement The element for which you need the z-index level.
//

@function get($list, $element) {
  $z-index: list.index($list, $element);

  @if $z-index {
    @return $z-index;
  }

  @warn 'There is no item “#{$element}” in this list; choose one of: #{$list}';

  @return null;
}
