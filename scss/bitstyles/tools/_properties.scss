@use '../settings/setup';
@use 'sass:list';
@use 'sass:string';

/*
 * Removes a value from a list
 *
 * @param $list The list from which to remove values
 * @param $value The value to remove from the list. Values that occur multiple times will all be removed
 */
@function remove($list, $value) {
  $result: ();

  @for $i from 1 through list.length($list) {
    @if list.nth($list, $i) != $value {
      $result: list.append($result, list.nth($list, $i));
    }
  }

  @return $result;
}

/*
 * Returns a classname suitable for a utility class, by joining strings with dash characters
 *
 * @param $classname-items An ordered list of strings to be joined with dashes to form the classname
 */
@function get-classname($classname-items) {
  $classname: null;
  $classname-items: remove($classname-items, null);

  @for $i from 1 through list.length($classname-items) {
    $classname-item: list.nth($classname-items, $i);

    @if $classname-item != '' and $classname-item != null {
      $classname: if($i == 1, $classname-item, '#{$classname}#{string.unquote('-')}#{$classname-item}');
    }
  }

  @return $classname;
}

/*
 * While most utility classes output a single CSS property, some (e.g. `.u-margin-m-x`) need to output several directions of the same property. This mixin iterates over the list that it’s passed, and outputs the property for each direction.
 *
 * @param $direction-values A list of CSS property directions
 * @param $name The name of the CSS property e.g. `margin`
 * @param $value The value to assign the property (the same value will be used for each direction specified)
 */
@mixin output-property-directions($direction-values, $name, $value) {
  @each $direction in $direction-values {
    $property: if($direction, '#{$name}-#{$direction}', $name);

    #{$property}: $value;
  }
}

/*
 * Outputs a classname with CSS properties, intended for CSS properties that do not have directional variants.
 *
 * @param $property-name The name of the CSS property to be specified e.g. `margin`
 * @param $classname-root The root name to use for the class, normally matches the CSS property to avoid confusion e.g. `margin`
 * @param $values A map of name/value pairs, where the name will form part of the classname, and the value will be output as the value for the current CSS property e.g. ('m': 1rem, 'l': 2rem)
 * @param $breakpoint-suffix [optional] Pass the suffix to use in the classname to denote the breakpoint you’re outputting these classes for. If you’re using a character that needs to be escaped, remember to double-escape it e.g. `\\\@m`
 */
@mixin output(
  $property-name,
  $classname-root,
  $values,
  $breakpoint-suffix: ''
) {
  @each $alias, $value in $values {
    $classname: get-classname(
      (
        setup.$namespace,
        'u',
        $classname-root,
        $alias
      )
    );

    .#{$classname}#{$breakpoint-suffix} {
      #{$property-name}: $value;
    }
  }
}

/*
 * Outputs a classname with CSS properties, intended for directional CSS properties i.e. those which accept `-top`, `-right` etc. suffixes.
 *
 * @param $property-name The name of the CSS property to be specified e.g. `margin`
 * @param $classname-root The root name to use for the class, normally matches the CSS property to avoid confusion e.g. `margin`
 * @param $values A map of name/value pairs, where the name will form part of the classname, and the value will be output as the value for the current CSS property e.g. ('m': 1rem, 'l': 2rem)
 * @param $directions A map of name/value pairs, where the name will form part of the classname, and the list of values will be form part of the CSS property e.g. ('left': ('left'), 'x': ('left', 'right'))
 * @param $breakpoint-suffix [optional] Pass the suffix to use in the classname to denote the breakpoint you’re outputting these classes for. If you’re using a character that needs to be escaped, remember to double-escape it e.g. `\\\@m`
 */
@mixin output-directional(
  $property-name,
  $classname-root,
  $values,
  $directions,
  $breakpoint-suffix: ''
) {
  @each $alias, $value in $values {
    @each $direction-name, $direction-values in $directions {
      $classname: get-classname(
        (
          setup.$namespace,
          'u',
          $classname-root,
          $alias,
          $direction-name
        )
      );

      .#{$classname}#{$breakpoint-suffix} {
        @include output-property-directions(
          $direction-values: $direction-values,
          $name: $property-name,
          $value: $value
        );
      }
    }
  }
}

/*
 * Outputs a classname that applies a block of properties that you pass in.
 *
 * @param $classname-prefix [optional] Pass a prefix for your classname e.g. to denote the layer of CSS it belongs to
 * @param $classname-root The root name to use for the class, normally matches the CSS property to avoid confusion e.g. `margin`
 * @param $breakpoint-suffix [optional] Pass the suffix to use in the classname to denote the breakpoint you’re outputting these classes for. If you’re using a character that needs to be escaped, remember to double-escape it e.g. `\\\@m`
 */
@mixin output-block(
  $classname-prefix,
  $classname-root,
  $breakpoint-suffix: ''
) {
  $classname: get-classname(
    (
      setup.$namespace,
      $classname-prefix,
      $classname-root,
    )
  );

  .#{$classname}#{$breakpoint-suffix} {
    @content;
  }
}
