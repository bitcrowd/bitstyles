@use 'sass:list';
@use '../settings/setup';
@use './classname';
@use './media-query';
@use './string';

/*
 * While most utility classes output a single CSS property, some (e.g. `.u-margin-m-x`) need to output several directions of the same property. This mixin iterates over the list that it’s passed, and outputs the property for each direction.
 *
 * @param $direction-values A list of CSS property directions
 * @param $name The name of the CSS property e.g. `margin`
 * @param $value The value to assign the property (the same value will be used for each direction specified)
 */
@mixin output-property-directions($direction-values, $name, $value) {
  @each $direction in $direction-values {
    #{string.join-with-dashes(($name, $direction))}: $value;
  }
}

/*
 * Outputs a classname with CSS properties, intended for CSS properties that do not have directional variants.
 *
 * @param $property-name The name of the CSS property to be specified e.g. `margin`
 * @param $classname-root The root name to use for the class, normally matches the CSS property to avoid confusion e.g. `margin`
 * @param $values A map of name/value pairs, where the name will form part of the classname, and the value will be output as the value for the current CSS property e.g. ('m': 1rem, 'l': 2rem)
 * @param $breakpoints The list of breakpoints at which these styles should be output
 */

@mixin output($property-name, $classname-root, $values, $breakpoints: ()) {
  $breakpoints: list.join(setup.$no-media-query, $breakpoints);

  @each $breakpoint in $breakpoints {
    @include media-query.get($breakpoint) {
      @each $alias, $value in $values {
        .#{classname.get($classname-items: ($classname-root, $alias), $layer: 'utility', $at-suffix: $breakpoint)} {
          #{$property-name}: $value;
        }
      }
    }
  }
}

/*
 * Outputs a classname with CSS properties, intended for directional CSS properties i.e. those which accept `-top`, `-right` etc. suffixes.
 *
 * @param $property-name The name of the CSS property to be specified e.g. `margin`
 * @param $classname-root The root name to use for the class, normally matches the CSS property to avoid confusion e.g. `margin`
 * @param $values A map of name/value pairs, where the name will form part of the classname, and the value will be output as the value for the current CSS property e.g. ('m': 1rem, 'l': 2rem)
 * @param $directions A map of name/value pairs, where the name will form part of the classname, and the list of values will be form part of the CSS property e.g. ('left': ('left'), 'x': ('left', 'right'))
 * @param $breakpoints The list of breakpoints at which these styles should be output
 */
@mixin output-directional(
  $property-name,
  $classname-root,
  $values,
  $directions,
  $breakpoints: ()
) {
  $breakpoints: list.join(setup.$no-media-query, $breakpoints);

  /* stylelint-disable max-nesting-depth */
  @each $breakpoint in $breakpoints {
    @include media-query.get($breakpoint) {
      @each $alias, $value in $values {
        @each $direction-name, $direction-values in $directions {
          .#{classname.get($classname-items: ($classname-root, $alias, $direction-name), $layer: 'utility', $at-suffix: $breakpoint)} {
            @include output-property-directions(
              $direction-values: $direction-values,
              $name: $property-name,
              $value: $value
            );
          }
        }
      }
    }
    /* stylelint-enable max-nesting-depth */
  }
}

/*
 * Outputs a classname that applies a block of properties that you pass in.
 *
 * @param $layer [optional] Pass a prefix for your classname e.g. to denote the layer of CSS it belongs to
 * @param $classname-root The root name to use for the class, normally matches the CSS property to avoid confusion e.g. `margin`
 * @param $breakpoint-suffix [optional] Pass the suffix to use in the classname to denote the breakpoint you’re outputting these classes for. If you’re using a character that needs to be escaped, remember to double-escape it e.g. `\\\@m`
 */
@mixin output-block(
  $layer: 'atom',
  $classname-root,
  $breakpoint: setup.$no-media-query
) {
  .#{classname.get($classname-items: ($classname-root), $layer: $layer, $at-suffix: $breakpoint)} {
    @content;
  }
}
