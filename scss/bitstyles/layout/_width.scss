// Widths
//
// **Bitstyles provides a series of classes focused on controlling width**.
//
// They’re most commonly used as part of a grid system (see our [grid system](/section/3.2)
// for more information on that), but should also be used alone if setting an
// element’s width is needed — as shown here — *instead of defining widths in a new CSS component*.
//
// Set the `$bitstyles-widths` variable to define how many columns you need. To create multiple grid
// systems with different numbers of equal-width columns you can specify more than one column-count
// (most often only on is needed though) e.g. `$bitstyles-widths: (10, 12)` creates
// classes that can be used to split a row into 10 or 12 columns:
//
// `.l-width--1-of-10` … `.l-width--10-of-10`
//
// `.l-width--1-of-12` … `.l-width--12-of-12`.
//
// If you define the `$bitstyles-widths-breakpoints` Sass list to contain the names
// of one or more breakpoints (it defaults to just `medium`), widths will also
// be created that apply only at those breakpoints:
//
// `.l-width--1-of-12@medium`…
//
// This allows you to create an element that is displayed at different sizes based on
// viewport size. See the section on [responsive grid systems](/section/3.2.2) for
// an example of the most common uses for this.
//
// Requires:
// - `settings/widths`
// - `tools/widths`
//
// markup:
//   <div class="l-width--2-of-12">
//      <div class="background-grey">2-of-12</div>
//   </div>
//   <div class="l-width--4-of-12">
//     <div class="background-grey">4-of-12</div>
//   </div>
//   <div class="l-width--6-of-12">
//     <div class="background-grey">6-of-12</div>
//   </div>
//
// Styleguide Layout.width

@import '../settings/width';

@include width($bitstyles-widths);

@each $width-breakpoint in $bitstyles-widths-breakpoints {
  @include media-query($width-breakpoint) {
    @each $i in $bitstyles-widths {
      @include width($i, \@#{$width-breakpoint});
    }
  }
}
