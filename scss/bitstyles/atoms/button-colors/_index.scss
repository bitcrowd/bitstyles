@forward 'settings';
@use './settings';
@use '../button/settings' as button-settings;
@use '../../tools/button';
@use '../../tools/classname';
@use '../../tools/design-token';
@use '../../tools/themes';
@use 'sass:map';

/* prettier-ignore */

@each $variant-name, $variant-themes in settings.$variants {
  $variant-default-theme: map.get($variant-themes, 'default');
  $button-name: '';
  @if $variant-name == '' {
    $button-name: 'button--primary';
  } @else {
    $button-name: 'button#{$variant-name}';
  }

  /* stylelint-disable custom-property-pattern, max-nesting-depth */
  #{classname.get($classname-items: 'button#{$variant-name}', $layer: 'atom')} {
    @if map.has-key($variant-default-theme, 'default') {
      &,
      &:visited {
        @each $property in button-settings.$allowed-color-properties {
          #{design-token.get('button', $property)}: var(
            design-token.get($button-name, $property)
          );
        }
      }
    }

    @if map.has-key($variant-default-theme, 'hover') {
      &:hover,
      &:focus {
        @each $property in button-settings.$allowed-color-properties {
          #{design-token.get('button', 'hover', $property)}: var(
            design-token.get($button-name, 'hover', $property)
          );
        }
      }
    }

    @if map.has-key($variant-default-theme, 'active') {
      &:active {
        @each $property in button-settings.$allowed-color-properties {
          #{design-token.get('button', 'active', $property)}: var(
            design-token.get($button-name, 'active', $property)
          );
        }
      }
    }

    @if map.has-key($variant-default-theme, 'pressed') {
      &[aria-expanded='true'],
      &[aria-pressed='true'],
      &[aria-selected='true'],
      &[aria-current] {
        @each $property in button-settings.$allowed-color-properties {
          #{design-token.get('button', 'pressed', $property)}: var(
            design-token.get($button-name, 'pressed', $property)
          );
        }
      }
    }

    @if map.has-key($variant-default-theme, 'disabled') {
      &:disabled,
      &[aria-disabled='true'],
      &:disabled:hover,
      &[aria-disabled='true']:hover,
      &:disabled:focus,
      &[aria-disabled='true']:focus {
        @each $property in button-settings.$allowed-color-properties {
          #{design-token.get('button', 'disabled', $property)}: var(
            design-token.get($button-name, 'disabled', $property)
          );
        }
      }
    }
  }
  /* stylelint-enable max-nesting-depth */

  @each $theme-name, $theme in $variant-themes {
    @include themes.get($theme-name) {
      @include button.colors($colors: $theme, $variant-name: $button-name);
    }
  }
}
