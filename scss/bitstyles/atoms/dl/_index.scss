@forward './settings';
@use './settings';
@use '../../tools/classname';
@use '../../tools/media-query';
@use 'sass:map';

#{classname.get($classname-items: 'dl', $layer: 'atom')},
#{classname.get($classname-items: 'dl__item', $layer: 'atom')} {
  display: grid;
  align-items: baseline;
}

#{classname.get($classname-items: 'dl__item', $layer: 'atom')} {
  &:last-child {
    border: 0;
  }
}

/* stylelint-disable max-nesting-depth */
@each $breakpoint, $size in settings.$sizes {
  @include media-query.get($breakpoint) {
    /* dl component */
    @if map.has-key($size, 'dl') {
      $dl-values: map.get($size, 'dl');
      #{classname.get($classname-items: 'dl', $layer: 'atom')} {
        @each $property in ('border-top', 'border-bottom', 'gap') {
          @if map.has-key($dl-values, $property) {
            #{$property}: map.get($dl-values, $property);
          }
        }
      }
    }

    /* Each item */
    @if map.has-key($size, 'item') {
      $item-values: map.get($size, 'item');
      #{classname.get($classname-items: 'dl__item', $layer: 'atom')} {
        @if map.has-key($item-values, 'border-top') {
          border-top: map.get($item-values, 'border-top');
        }
        @if map.has-key($item-values, 'border-bottom') {
          border-bottom: map.get($item-values, 'border-bottom');
        }
        @if map.has-key($item-values, 'gap') {
          gap: map.get($item-values, 'gap');
          padding-top: map.get($item-values, 'gap');
          padding-bottom: map.get($item-values, 'gap');
        }
        @if map.has-key($item-values, 'padding-horizontal') {
          padding-right: map.get($item-values, 'padding-horizontal');
          padding-left: map.get($item-values, 'padding-horizontal');
        }
      }
    }

    /* dt component */
    @if map.has-key($size, 'dt') {
      $dt-values: map.get($size, 'dt');
      #{classname.get($classname-items: 'dl__dt', $layer: 'atom')} {
        @each $property in ('font-size', 'font-weight', 'color') {
          @if map.has-key($dt-values, $property) {
            #{$property}: map.get($dt-values, $property);
          }
        }
      }
    }
  }
}
/* stylelint-enable max-nesting-depth */

@include media-query.get(settings.$layout-breakpoint) {
  #{classname.get($classname-items: 'dl__item', $layer: 'atom')} {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }

  #{classname.get($classname-items: 'dl__dd', $layer: 'atom')} {
    grid-column: span 2 / span 2;
  }
}
