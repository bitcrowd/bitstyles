@forward './settings';
@use './settings';
@use '../../settings/layout';
@use '../../tools/classname';
@use '../../tools/custom-property';
@use '../../tools/media-query';
@use '../../tools/palette';
@use '../../tools/properties';
@use '../../tools/size';
@use 'sass:map';

/* stylelint-disable scss/dollar-variable-default */
$padding-horizontal-property: custom-property.get(
  $items: (
    'badge',
    'padding-horizontal',
  ),
  $layer: 'atom',
);
$padding-vertical-property: custom-property.get(
  $items: (
    'badge',
    'padding-vertical',
  ),
  $layer: 'atom',
);
$gap-property: custom-property.get(
  $items: (
    'badge',
    'gap',
  ),
  $layer: 'atom',
);
/* stylelint-enable scss/dollar-variable-default */

#{classname.get($classname-items: 'badge', $layer: 'atom')} {
  display: inline-flex;
  align-items: center;
  padding: var(#{$padding-vertical-property})
    var(#{$padding-horizontal-property});
  gap: var(#{$gap-property});
  border-radius: layout.$border-radius-round;
  white-space: nowrap;

  #{classname.get($classname-items: 'badge__button', $layer: 'atom')} {
    margin-left: calc(
      var(#{$padding-horizontal-property}) * -1 + var(#{$gap-property})
    );
  }
}

@each $breakpoint, $size-variants in settings.$size-variants {
  @include media-query.get($breakpoint) {
    @each $size-variant-name, $size-variant in ($size-variants) {
      $class: '';
      @if $size-variant-name == '' {
        $class: 'badge';
      } @else {
        $class: 'badge--#{$size-variant-name}';
      }
      #{classname.get($classname-items: $class, $layer: 'atom')} {
        #{$padding-horizontal-property}: map.get(
          $size-variant,
          'padding-horizontal'
        );
        #{$padding-vertical-property}: map.get(
          $size-variant,
          'padding-vertical'
        );
        #{$gap-property}: map.get($size-variant, 'gap');
      }
    }
  }
}
